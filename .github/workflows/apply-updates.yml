name: Apply Resume Updates

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          fetch-depth: 0

      - name: Check for update files
        id: check_files
        run: |
          if find updates -name "*.zip" -type f | head -1 | grep -q .; then
            echo "updates_found=true" >> $GITHUB_OUTPUT
            echo "Found update files to process"
          else
            echo "updates_found=false" >> $GITHUB_OUTPUT
            echo "No update files found"
          fi

      - name: Setup Node.js
        if: steps.check_files.outputs.updates_found == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        if: steps.check_files.outputs.updates_found == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip jq file
          npm ci --only=production

      - name: Process updates safely
        if: steps.check_files.outputs.updates_found == 'true'
        run: |
          set -euo pipefail

          # Process each zip file
          for zipfile in updates/*.zip; do
            echo "Processing: $zipfile"
            
            # Security checks
            size=$(stat -c%s "$zipfile" 2>/dev/null || stat -f%z "$zipfile")
            if [ "$size" -gt 10485760 ]; then
              echo "Error: $zipfile exceeds 10MB limit ($size bytes)"
              exit 1
            fi
            
            # Verify it's actually a zip file
            if ! file "$zipfile" | grep -q "Zip archive"; then
              echo "Error: $zipfile is not a valid ZIP archive"
              exit 1
            fi
            
            # Create temporary directory with restricted permissions
            temp_dir=$(mktemp -d)
            chmod 700 "$temp_dir"
            
            # Safe extraction with limits
            if ! timeout 30 unzip -q -j "$zipfile" -d "$temp_dir" -x "__MACOSX/*" "*.DS_Store"; then
              echo "Error: Failed to extract $zipfile"
              rm -rf "$temp_dir"
              exit 1
            fi
            
            # Verify extracted files count
            file_count=$(find "$temp_dir" -type f | wc -l)
            if [ "$file_count" -gt 100 ]; then
              echo "Error: Too many files in archive ($file_count)"
              rm -rf "$temp_dir"
              exit 1
            fi
            
            # Validate JSON files before copying
            json_valid=true
            for json_file in "$temp_dir"/*.json; do
              if [ -f "$json_file" ]; then
                if ! jq empty "$json_file" 2>/dev/null; then
                  echo "Error: Invalid JSON in $(basename "$json_file")"
                  json_valid=false
                fi
              fi
            done
            
            if [ "$json_valid" = false ]; then
              rm -rf "$temp_dir"
              exit 1
            fi
            
            # Copy files safely
            find "$temp_dir" -name "*.json" -type f -exec cp {} src/data/ \;
            find "$temp_dir" -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.webp" | head -20 | xargs -I {} cp {} public/images/ 2>/dev/null || true
            
            # Cleanup
            rm -rf "$temp_dir"
            
            echo "Successfully processed: $zipfile"
          done

          # Remove processed zip files
          rm -f updates/*.zip

          # Final validation
          echo "Validating all JSON files..."
          for json_file in src/data/*.json; do
            if ! jq empty "$json_file"; then
              echo "Error: Corrupted JSON file $json_file"
              exit 1
            fi
          done

          echo "All updates processed successfully"

      - name: Commit and push changes
        if: steps.check_files.outputs.updates_found == 'true'
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

          git add src/data/ public/images/ updates/

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            timestamp=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            git commit -m "Apply resume updates - $timestamp
            
            - Updated resume data files
            - Updated images
            - Processed and removed ZIP files"
            
            # Retry push with exponential backoff
            for i in {1..3}; do
              if git push; then
                echo "Successfully pushed changes"
                break
              else
                echo "Push failed, attempt $i/3"
                if [ $i -lt 3 ]; then
                  sleep $((2**i))
                  git pull --rebase
                fi
              fi
            done
          fi
